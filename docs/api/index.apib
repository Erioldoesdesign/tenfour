FORMAT: 1A

# TenFour API

# Organizations [/api/v1/organizations]

## Get all organizations [GET /api/v1/organizations]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "organizations": [
                    {
                        "name": "Ushahidi",
                        "subdomain": "ushahidi@tenfour.org"
                    }
                ]
            }

## Create an organization [POST /api/v1/organizations]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Ushahidi",
                "subdomain": "ushahidi@tenfour.org"
            }

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "name": "Ushahidi",
                    "subdomain": "ushahidi@tenfour.org"
                }
            }

## Get a single organization [GET /api/v1/organizations/{org_id}]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "id": 3,
                    "name": "Ushahidi",
                    "subdomain": "ushahidi@tenfour.org"
                }
            }

## Update organization details [PUT /api/v1/organizations/{org_id}]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Ushahidi"
            }

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "id": 3,
                    "name": "Ushahidi",
                    "subdomain": "ushahidi"
                }
            }

## Delete an organization [DELETE /api/v1/organizations/{org_id}]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "id": 3,
                    "name": "Ushahidi",
                    "subdomain": "ushahidi"
                }
            }

## Accept member invite [POST /api/v1/organizations/invite/{org_id}/accept/{person_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "invite_token": "aSecretToken",
                "password": "newpassword",
                "password_confirm": "newpassword"
            }

+ Response 200 (application/json)
    + Body

            {
                "person": {
                    "name": "User Name",
                    "role": "member",
                    "person_type": "user"
                }
            }

# People [/api/v1/organizations]

## Add member to an organization [POST /api/v1/organizations/{org_id}/people]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Testing Testing",
                "email": "test@ushahidi.com",
                "password": "newpassword",
                "password_confirm": "newpassword",
                "person_type": "user",
                "role": "member"
            }

+ Response 200 (application/json)
    + Body

            {
                "person": {
                    "config_profile_reviewed": true,
                    "config_self_test_sent": false,
                    "id": 4,
                    "initials": "TT",
                    "name": "Testing Testing",
                    "organization_id": 2,
                    "person_type": "user",
                    "role": "member",
                    "uri": "/users/4"
                }
            }

## List members of an organization [GET /api/v1/organizations/{org_id}/people/{?offset,limit}]


+ Parameters
    + org_id: (number, required) - Organization id
    + offset: (number, optional) - 
        + Default: 0
    + limit: (number, optional) - 
        + Default: 0

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "people": [
                    {
                        "contacts": [
                            {
                                "contact": "linda@ushahidi.com",
                                "id": 3,
                                "type": "email",
                                "uri": "/contact/3",
                                "user": {
                                    "gravatar": "eac7707b1d94e619add99353b2977b6f"
                                }
                            },
                            {
                                "contact": "admin@ushahidi.com",
                                "id": 5,
                                "type": "email",
                                "uri": "/contact/5",
                                "user": {
                                    "gravatar": "3578216d69634e299351bb18b7c7fc46"
                                }
                            }
                        ],
                        "description": "Admin user",
                        "id": 2,
                        "name": "Admin user",
                        "organization_id": 2,
                        "person_type": "user",
                        "profile_picture": null,
                        "role": "admin",
                        "uri": "/users/2"
                    },
                    {
                        "contacts": [
                            {
                                "contact": "org_admin@ushahidi.com",
                                "id": 8,
                                "type": "email",
                                "uri": "/contact/8",
                                "user": {
                                    "gravatar": "a50a84475f1d038b516be6fc5923296d"
                                }
                            }
                        ],
                        "description": "Org admin",
                        "id": 5,
                        "name": "Org admin",
                        "organization_id": 2,
                        "person_type": "user",
                        "profile_picture": null,
                        "role": "admin",
                        "uri": "/users/5"
                    }
                ]
            }

## Find a member [GET /api/v1/organizations/{org_id}/people/{person_id}/{?history_offset,history_limit}]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id
    + history_offset: (number, optional) - 
        + Default: 0
    + history_limit: (number, optional) - 
        + Default: 1

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "person": {
                    "checkins": [],
                    "replies": [],
                    "contacts": [
                        {
                            "contact": "+254721674180",
                            "id": 1,
                            "type": "phone",
                            "updated_at": null,
                            "uri": "/contact/1"
                        },
                        {
                            "contact": "test@ushahidi.com",
                            "id": 2,
                            "type": "email",
                            "updated_at": null,
                            "uri": "/contact/2"
                        }
                    ],
                    "description": "Test user",
                    "gravatar": "7563a30b6c2f8bd7eaac8adc38b8de72",
                    "id": 1,
                    "initials": "TU",
                    "name": "Test user",
                    "organization_id": 2,
                    "person_type": "user",
                    "profile_picture": null,
                    "role": "member",
                    "uri": "/users/1"
                }
            }

## Delete member from an organization [DELETE /api/v1/organizations/{org_id}/people/{person_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "person": {
                    "description": "Org member",
                    "id": 3,
                    "initials": "OM",
                    "name": "Org member",
                    "organization_id": 2,
                    "person_type": "user",
                    "profile_picture": null,
                    "role": "member",
                    "updated_at": null,
                    "uri": "/users/3"
                }
            }

## Update organization member [PUT /api/v1/organizations/{org_id}/people/{person_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Updated org member",
                "password": "newpassword",
                "person_type": "user"
            }

+ Response 200 (application/json)
    + Body

            {
                "person": {
                    "id": 1,
                    "initials": "UOM",
                    "invite_sent": 0,
                    "name": "Updated org member",
                    "organization_id": 2,
                    "person_type": "user",
                    "profile_picture": null,
                    "role": "member",
                    "updated_at": "2017-03-20 08:38:27",
                    "uri": "/users/1"
                }
            }

## Invite a member [POST /api/v1/organizations/{org_id}/people/{person_id}/invite]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "person": {
                    "name": "User Name",
                    "role": "member",
                    "person_type": "user"
                }
            }

## Notify the organization owner [POST /api/v1/organizations/{org_id}/people/owner/notify]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "message": "The organization has no credits remaining"
            }

+ Response 200 (application/json)
    + Body

            "OK"

# Contacts [/api/v1/organizations]

## Add member contact [POST /api/v1/organizations/{org_id}/people/{person_id}/contacts]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "type": "email",
                "contact": "linda@ushahidi.com",
                "preferred": "1"
            }

+ Response 200 (application/json)
    + Body

            {
                "contact": {
                    "type": "email",
                    "contact": "linda@ushahidi.com",
                    "preferred": "1"
                }
            }

## Update member contact [PUT /api/v1/organizations/{org_id}/people/{person_id}/contacts/{contact_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id
    + contact_id: (number, required) - Contact id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "type": "email",
                "contact": "linda@ushahidi.com",
                "preferred": "1"
            }

+ Response 200 (application/json)
    + Body

            {
                "contact": {
                    "type": "email",
                    "contact": "linda@ushahidi.com",
                    "preferred": "1"
                }
            }

## Delete member contact [DELETE /api/v1/organizations/{org_id}/people/{person_id}/contacts/{contact_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + person_id: (number, required) - Person id
    + contact_id: (number, required) - Contact id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "contact": {
                    "type": "email",
                    "contact": "linda@ushahidi.com",
                    "preferred": "1"
                }
            }

## Unsubscribe an email address from check-ins [POST /api/v1/organizations/unsubscribe]


+ Request (application/json)
    + Body

            {
                "token": "anunsubscribetoken",
                "email": "linda@ushahidi.com"
            }

# Files [/api/v1/organizations]

## File Upload [POST /api/v1/organizations/{org_id}/files]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "file": "sample.csv"
            }

+ Response 200 (application/json)
    + Body

            {
                "file": {
                    "columns": [
                        "Name",
                        "Description",
                        "Phone",
                        "Email",
                        "Address",
                        "Twitter"
                    ],
                    "id": 2,
                    "organization": {
                        "id": 2,
                        "uri": "/organizations/2"
                    },
                    "uri": "organizations/2/files/2"
                }
            }

## Update File Upload [PUT /api/v1/organizations/{orgId}/files/{file_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + file_id: (number, required) - File id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "columns": [
                    "name",
                    "description",
                    "phone",
                    "email",
                    "address",
                    "twitter"
                ],
                "maps_to": [
                    "name",
                    null,
                    "phone",
                    "email",
                    null,
                    "twitter"
                ]
            }

+ Response 200 (application/json)
    + Body

            {
                "columns": [
                    "name",
                    "description",
                    "phone",
                    "email",
                    "address",
                    "twitter"
                ],
                "maps_to": [
                    "name",
                    null,
                    "phone",
                    "email",
                    null,
                    "twitter"
                ]
            }

## Import contacts [POST /api/v1/organizations/{orgId}/files/{file_id}/contacts]


+ Parameters
    + org_id: (number, required) - Organization id
    + file_id: (number, required) - File id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

# Groups [/api/v1/organizations/{org_id}/groups]

## Create a group in an organization [POST /api/v1/organizations/{org_id}/groups]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Testing Group",
                "members": [
                    {
                        "id": 3
                    },
                    {
                        "id": 1
                    }
                ]
            }

+ Response 200 (application/json)
    + Body

            {
                "group": {
                    "id": 4,
                    "created_at": "2017-03-18 19:19:27",
                    "name": "Testing Group",
                    "organization": {
                        "id": 2,
                        "uri": "/organizations/2"
                    },
                    "members": [
                        {
                            "id": 3,
                            "uri": "/users/3"
                        },
                        {
                            "id": 1,
                            "uri": "/users/1"
                        }
                    ]
                }
            }

## Delete a group from an organization [DELETE /api/v1/organizations/{org_id}/groups/{group_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + group_id: (number, required) - Group id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "group": {
                    "name": "Test Group",
                    "organization_id": 2,
                    "updated_at": null
                }
            }

## Get all groups for an organization [GET /api/v1/organizations/{org_id}/groups{?offset,limit}]


+ Parameters
    + offset: (string, optional) - 
        + Default: 0
    + limit: (string, optional) - 
        + Default: 0

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "groups": [
                    {
                        "name": "Test Group 1",
                        "created_at": null,
                        "id": 1,
                        "organization": {
                            "id": 2,
                            "uri": "/organizations/2"
                        },
                        "members": [
                            {
                                "id": 1,
                                "uri": "/users/1"
                            }
                        ],
                        "updated_at": null,
                        "uri": "/organizations/2/groups/1"
                    },
                    {
                        "name": "Test Group 2",
                        "created_at": null,
                        "id": 2,
                        "organization": {
                            "id": 2,
                            "uri": "/organizations/2"
                        },
                        "members": [
                            {
                                "id": 1,
                                "uri": "/users/1"
                            }
                        ],
                        "updated_at": null,
                        "uri": "/organizations/2/groups/2"
                    },
                    {
                        "name": "Test Group 3",
                        "created_at": null,
                        "id": 3,
                        "organization": {
                            "id": 2,
                            "uri": "/organizations/2"
                        },
                        "members": [
                            {
                                "id": 1,
                                "uri": "/users/1"
                            }
                        ],
                        "updated_at": null,
                        "uri": "/organizations/2/groups/3"
                    }
                ]
            }

## Get a single group [GET /api/v1/organizations/{org_id}/groups/{group_id}]


+ Parameters
    + group_id: (number, required) - Group id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "group": {
                    "id": 1,
                    "name": "Test Group 1",
                    "organization": {
                        "id": 1,
                        "uri": "/organizations/1"
                    },
                    "members": [
                        {
                            "id": 1,
                            "uri": "/users/1"
                        },
                        {
                            "id": 2,
                            "uri": "/users/2"
                        }
                    ],
                    "updated_at": null,
                    "uri": "/organizations/2/groups/1"
                }
            }

## Update a group [PUT /api/v1/organizations/{org_id}/groups/{group_id}]


+ Parameters
    + group_id: (number, required) - Group id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "organization_id": 2,
                "members": [
                    {
                        "id": 1
                    },
                    {
                        "id": 2
                    }
                ],
                "name": "Test Group"
            }

+ Response 200 (application/json)
    + Body

            {
                "group": {
                    "created_at": null,
                    "id": 1,
                    "name": "Test Group",
                    "organization": {
                        "id": 2,
                        "uri": "/organizations/2"
                    },
                    "members": [
                        {
                            "id": 1,
                            "uri": "/users/1"
                        },
                        {
                            "id": 2,
                            "uri": "/users/2"
                        }
                    ],
                    "updated_at": "2017-03-18 19:32:34",
                    "uri": "/organization/1/groups/1"
                }
            }

# Checkins [/api/v1/organizations/{org_id}/checkins]

## Get all check-ins for an organization [GET /api/v1/organizations/{org_id}/checkins{?offset,limit}]


+ Parameters
    + org_id: (number, required) - Organization id
    + offset: (string, optional) - 
        + Default: 0
    + limit: (string, optional) - 
        + Default: 0

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "checkins": [
                    {
                        "answers": null,
                        "complaint_count": 0,
                        "created_at": null,
                        "id": 1,
                        "message": "Are you OK?",
                        "organization": {
                            "id": 2,
                            "uri": "/organizations/2"
                        },
                        "recipients": [
                            {
                                "id": 1,
                                "uri": "/users/1"
                            }
                        ],
                        "replies": [
                            {
                                "answer": null,
                                "contact": {
                                    "id": 1,
                                    "uri": "/contacts/1"
                                },
                                "created_at": "2017-03-17 09:09:01",
                                "id": 1,
                                "location_text": null,
                                "message": "I am OK",
                                "message_id": null,
                                "check_in": {
                                    "id": 1,
                                    "uri": "/organizations/2/checkins/1"
                                },
                                "updated_at": null,
                                "uri": "/organizations/2/checkins/1/reply/1",
                                "user": {
                                    "id": 1,
                                    "uri": "/users/1"
                                }
                            }
                        ],
                        "reply_count": 2,
                        "send_via": null,
                        "sent": 0,
                        "sent_count": 4,
                        "status": "pending",
                        "updated_at": null,
                        "uri": "/organizations/2/checkins/1",
                        "user": {
                            "id": 4,
                            "uri": "/users/4"
                        }
                    },
                    {
                        "answers": null,
                        "complaint_count": 0,
                        "created_at": null,
                        "id": 3,
                        "message": "Where is everyone now?",
                        "organization": {
                            "id": 2,
                            "uri": "/organizations/2"
                        },
                        "recipients": [
                            {
                                "id": 3,
                                "uri": "/users/3"
                            }
                        ],
                        "replies": [
                            {
                                "answer": null,
                                "contact": {
                                    "id": 6,
                                    "uri": "/contacts/6"
                                },
                                "created_at": "2017-03-17 09:08:01",
                                "id": 5,
                                "location_text": null,
                                "message": "Latest answer again",
                                "message_id": null,
                                "checkin": {
                                    "id": 3,
                                    "uri": "/organizations/2/checkins/3"
                                },
                                "updated_at": null,
                                "uri": "/organizations/2/checkins/3/reply/5",
                                "user": {
                                    "id": 4,
                                    "uri": "/users/4"
                                }
                            }
                        ],
                        "reply_count": 1,
                        "send_via": null,
                        "sent": 0,
                        "sent_count": 0,
                        "status": "pending",
                        "updated_at": null,
                        "uri": "/organizations/2/checkins/3",
                        "user": {
                            "id": 1,
                            "uri": "/users/1"
                        }
                    },
                    {
                        "answers": [
                            "yes",
                            "no"
                        ],
                        "complaint_count": 0,
                        "created_at": null,
                        "id": 4,
                        "message": "Could you update with an answer?",
                        "organization": {
                            "id": 2,
                            "uri": "/organizations/2"
                        },
                        "recipients": [],
                        "replies": [],
                        "reply_count": 0,
                        "send_via": null,
                        "sent": 0,
                        "sent_count": 1,
                        "status": "pending",
                        "updated_at": null,
                        "uri": "/organizations/2/checkins/4",
                        "user": {
                            "id": 1,
                            "uri": "/users/1"
                        }
                    }
                ]
            }

## Get a single check in [GET /api/v1/organizations/{org_id}/checkins/{check_in_id}]


+ Parameters
    + check_in_id: (number, required) - check in id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "checkin": {
                    "answers": null,
                    "complaint_count": 0,
                    "created_at": null,
                    "id": 1,
                    "message": "Are you OK?",
                    "organization": {
                        "id": 2,
                        "uri": "/organizations/2"
                    },
                    "recipients": [
                        {
                            "id": 1,
                            "uri": "/users/1"
                        },
                        {
                            "id": 2,
                            "uri": "/users/2"
                        }
                    ],
                    "replies": [
                        {
                            "answer": null,
                            "contact": {
                                "id": 1,
                                "uri": "/contacts/1"
                            },
                            "created_at": "2017-03-17 10:27:30",
                            "id": 1,
                            "location_text": null,
                            "message": "I am OK",
                            "message_id": null,
                            "checkin": {
                                "id": 1,
                                "uri": "/organizations/2/checkins/1"
                            },
                            "updated_at": null,
                            "uri": "/organizations/2/checkins/1/reply/1",
                            "user": {
                                "id": 1,
                                "role": "member",
                                "uri": "/users/1"
                            }
                        }
                    ],
                    "reply_count": 2,
                    "send_via": null,
                    "sent": 0,
                    "sent_count": 4,
                    "status": "pending",
                    "updated_at": null,
                    "uri": "/organizations/2/checkins/1",
                    "user": {
                        "id": 4,
                        "uri": "/users/4"
                    }
                }
            }

## Create a check in [POST /api/v1/organizations/{org_id}/checkins]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "answers": [
                    {
                        "answer": "No"
                    },
                    {
                        "answer": "Yes"
                    }
                ],
                "message": "Westgate under siege, are you ok?",
                "organization_id": 2,
                "recipients": [
                    {
                        "id": 3
                    },
                    {
                        "id": 1
                    }
                ]
            }

+ Response 200 (application/json)
    + Body

            {
                "checkin": {
                    "answers": [
                        "No",
                        "Yes"
                    ],
                    "complaint_count": 0,
                    "created_at": "2017-03-18 19:19:27",
                    "id": 6,
                    "message": "Westgate under siege, are you ok?",
                    "organization": {
                        "id": 2,
                        "uri": "/organizations/2"
                    },
                    "recipients": [
                        {
                            "id": 3,
                            "uri": "/users/3"
                        },
                        {
                            "id": 1,
                            "uri": "/users/1"
                        }
                    ],
                    "replies": [],
                    "send_via": null,
                    "sent": 0,
                    "status": "pending",
                    "updated_at": "2017-03-18 19:19:27",
                    "uri": "/organizations/2/checkins/6",
                    "user": {
                        "id": 5,
                        "uri": "/users/5"
                    }
                }
            }

## Update/resend a check-in [PUT /api/v1/organizations/{org_id}/checkins/{check_in_id}]


+ Parameters
    + check_in_id: (number, required) - Check-in id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "organization_id": 2,
                "recipients": [
                    {
                        "id": 1
                    },
                    {
                        "id": 2
                    },
                    {
                        "id": 3
                    }
                ],
                "sent": 1,
                "status": "received"
            }

+ Response 200 (application/json)
    + Body

            {
                "checkin": {
                    "answers": null,
                    "complaint_count": 0,
                    "created_at": null,
                    "id": 1,
                    "message": "Westgate under siege",
                    "organization": {
                        "id": 2,
                        "uri": "/organizations/2"
                    },
                    "recipients": [
                        {
                            "id": 1,
                            "uri": "/users/1"
                        },
                        {
                            "id": 2,
                            "uri": "/users/2"
                        },
                        {
                            "id": 4,
                            "uri": "/users/4"
                        }
                    ],
                    "replies": [
                        {
                            "answer": null,
                            "contact": {
                                "id": 1,
                                "uri": "/contacts/1"
                            },
                            "created_at": "2017-03-18 19:32:30",
                            "id": 1
                        },
                        {
                            "answer": null,
                            "contact": {
                                "id": 4,
                                "uri": "/contacts/4"
                            },
                            "created_at": "2017-03-17 19:32:30",
                            "id": 2
                        },
                        {
                            "answer": null,
                            "contact": {
                                "id": 4,
                                "uri": "/contacts/4"
                            },
                            "created_at": "2017-03-18 19:32:30",
                            "id": 3
                        }
                    ],
                    "send_via": null,
                    "sent": 1,
                    "status": "received",
                    "updated_at": "2017-03-18 19:32:34",
                    "uri": "/organizations/2/checkins/1",
                    "user": {
                        "id": 4,
                        "uri": "/users/4"
                    }
                }
            }

## Resend a check-in request to a single recipient. [POST /api/v1/organizations/{org_id}/checkins/{check_in_id}/recipients/{recipient_id}/messages]


+ Parameters
    + check_in_id: (number, required) - Check-in id
    + recipient_id: (number, required) - Recipient id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

## List check-in recipients [GET /api/v1/organizations/{org_id}/checkins/{check_in_id}/recipients]


+ Parameters
    + check_in_id: (number, required) - Check-in id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "recipients": [
                    {
                        "id": 1,
                        "uri": "/users/1"
                    },
                    {
                        "id": 2,
                        "uri": "/users/2"
                    },
                    {
                        "id": 4,
                        "uri": "/users/4"
                    }
                ]
            }

## List check-in messages [GET /api/v1/organizations/{org_id}/checkins/{check_in_id}/messages]


+ Parameters
    + check_in_id: (number, required) - Check-in id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "messages": [
                    {
                        "contact": "+254721674180",
                        "id": 1,
                        "type": "phone",
                        "uri": "/contacts/1",
                        "user": {
                            "id": 1
                        }
                    },
                    {
                        "contact": "linda@ushahidi.com",
                        "id": 3,
                        "type": "email",
                        "uri": "/contacts/3",
                        "user": {
                            "id": 2
                        }
                    }
                ]
            }

## Delete a check-in [DELETE /api/v1/organizations/{org_id}/checkins]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 405 (application/json)
    + Body

            {
                "message": "405 Method Not Allowed",
                "status_code": 405
            }

# Replies [/api/v1/organizations/{org_id}/checkins/{check_in_id}/replies]

## Get a single reply [GET /api/v1/organizations/{org_id}/checkins/{check_in_id}/replies/{reply_id}]


+ Parameters
    + check_in_id: (number, required) - Check-in id
    + reply_id: (number, required) - Reply id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "reply": {
                    "answer": null,
                    "contact": {
                        "id": 3,
                        "uri": "/contacts/3"
                    },
                    "created_at": "2016-04-15 20:01:55",
                    "id": 1,
                    "location_text": null,
                    "message": "I am OK",
                    "message_id": null,
                    "checkin": {
                        "id": 4,
                        "uri": "/organizations/2/checkins/4"
                    },
                    "updated_at": null,
                    "uri": "/organizations/2/checkins/4/reply/1",
                    "user": {
                        "id": 1,
                        "uri": "/users/1"
                    }
                }
            }

## Add reply [POST /api/v1/organizations/{org_id}/checkins/{check_in_id}/replies]


+ Parameters
    + check_in_id: (number, required) - Check-in id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "answer": "yes",
                "message": "I am OK"
            }

+ Response 200 (application/json)
    + Body

            {
                "reply": {
                    "answer": "yes",
                    "created_at": "2016-03-15 20:27:54",
                    "id": 6,
                    "message": "I am OK",
                    "checkin": {
                        "id": 1,
                        "uri": "/organizations/2/checkins/1"
                    },
                    "updated_at": "2016-03-15 20:27:54",
                    "uri": "/organizations/2/checkins/1/reply/6",
                    "user": {
                        "id": 5,
                        "uri": "/users/5"
                    },
                    "user_id": 5
                }
            }

## List check-in replies [GET /api/v1/organizations/{org_id}/checkins/{check_in_id}/replies]


+ Parameters
    + check_in_id: (number, required) - Check-in id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "replies": [
                    {
                        "answer": null,
                        "contact": {
                            "id": 1,
                            "uri": "/contacts/1"
                        },
                        "created_at": "2017-03-16 10:41:11",
                        "id": 1,
                        "location_text": null,
                        "message": "I am OK",
                        "message_id": null,
                        "checkin": {
                            "id": 1,
                            "uri": "/organizations/2/checkins/1"
                        },
                        "updated_at": null,
                        "uri": "/organizations/2/checkins/1/reply/1",
                        "user": {
                            "config_profile_reviewed": 0,
                            "config_self_test_sent": 0,
                            "created_at": null,
                            "description": "Test user",
                            "first_time_login": 1,
                            "id": 1,
                            "initials": "TU",
                            "invite_sent": 0,
                            "name": "Test user",
                            "organization_id": 2,
                            "person_type": "user",
                            "profile_picture": null,
                            "role": "member",
                            "updated_at": null,
                            "uri": "/users/1"
                        }
                    },
                    {
                        "answer": null,
                        "contact": {
                            "id": 4,
                            "uri": "/contacts/4"
                        },
                        "created_at": "2017-03-16 10:41:11",
                        "id": 3,
                        "location_text": null,
                        "message": "Latest answer",
                        "message_id": null,
                        "checkin": {
                            "id": 1,
                            "uri": "/organizations/2/checkins/1"
                        },
                        "updated_at": null,
                        "uri": "/organizations/2/checkins/1/reply/3",
                        "user": {
                            "config_profile_reviewed": 0,
                            "config_self_test_sent": 0,
                            "created_at": null,
                            "description": "Org owner",
                            "first_time_login": 1,
                            "id": 4,
                            "initials": "OO",
                            "invite_sent": 0,
                            "name": "Org owner",
                            "organization_id": 2,
                            "person_type": "user",
                            "profile_picture": null,
                            "role": "owner",
                            "updated_at": null,
                            "uri": "/users/4"
                        }
                    }
                ]
            }

# Subscriptions [/api/v1/organizations]

## Get all subscriptions [GET /api/v1/organizations/{org_id}/subscriptions]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "subscriptions": {
                    "id": "1",
                    "status": "in_trial",
                    "card_type": "Visa",
                    "last_four": "1111",
                    "expiry_month": 12,
                    "expiry_year": 1,
                    "trial_ends_at": "2017-06-02 15:38:33",
                    "next_billing_at": "2017-06-02 15:38:33"
                }
            }

## Get a single subscription [GET /api/v1/organizations/{org_id}/subscriptions/{subscription_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + subscription_id: (number, required) - Subscription id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "subscription": {
                    "id": "1",
                    "status": "in_trial",
                    "card_type": "Visa",
                    "last_four": "1111",
                    "expiry_month": 12,
                    "expiry_year": 1,
                    "trial_ends_at": "2017-06-02 15:38:33",
                    "next_billing_at": "2017-06-02 15:38:33"
                }
            }

## Cancel a subscription [DELETE /api/v1/organizations/{org_id}/subscriptions/{subscription_id}]


+ Parameters
    + org_id: (number, required) - Organization id
    + subscription_id: (number, required) - Subscription id

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "subscription": {
                    "id": 1,
                    "status": "cancelled"
                }
            }

## Create a new subscription URL [POST /api/v1/organizations/{org_id}/subscriptions/hostedpage]


+ Parameters
    + org_id: (number, required) - Organization id

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "callback": "http://subdomain.tenfour.org/callback"
            }

+ Response 200 (application/json)
    + Body

            {
                "url": "http://api.chargebee.com/hostedpage?xxx"
            }

## Create an updated subscription URL [PUT /api/v1/organizations/{org_id}/subscriptions/hostedpage]


+ Parameters
    + org_id: (number, required) - Organization id
    + subscription_id: (number, required) - Subscription id

+ Request (application/json)
    + Body

            {
                "callback": "http://subdomain.tenfour.org/callback"
            }

+ Response 200 (application/json)
    + Body

            {
                "url": "http://api.chargebee.com/hostedpage?xxx"
            }

## Confirm a subscription [POST /api/v1/organizations/{org_id}/subscriptions/hostedpage/confirm]
API endpoint called by client after successful ChargeBee subscription creation

+ Parameters
    + org_id: (number, required) - Organization id
    + subscription_id: (number, required) - Subscription id

+ Request (application/json)
    + Body

            {
                "subscription_id": "cb123uijh12iu3h87"
            }

+ Response 200 (application/json)
    + Body

            {
                "subscription": {
                    "id": 1,
                    "status": "active"
                }
            }
