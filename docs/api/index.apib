FORMAT: 1A

# RollCall API

# Organizations [/api/v1/organizations]

## Get all organizations [GET /api/v1/organizations]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "organizations": [
                    {
                        "name": "Ushahidi",
                        "subdomain": "ushahidi@rollcall.io"
                    }
                ]
            }

## Create an organization [POST /api/v1/organizations]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Ushahidi",
                "subdomain": "ushahidi@rollcall.io"
            }

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "name": "Ushahidi",
                    "subdomain": "ushahidi@rollcall.io"
                }
            }

## Get a single organization [GET /api/v1/organizations/{orgId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "id": 3,
                    "name": "Ushahidi",
                    "subdomain": "ushahidi@rollcall.io"
                }
            }

## Update organization details [PUT /api/v1/organizations/{orgId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Ushahidi",
                "subdomain": "ushahidi@rollcall.io"
            }

+ Response 200 (application/json)
    + Body

            {
                "organization": {
                    "id": 3,
                    "name": "Ushahidi",
                    "subdomain": "ushahidi@rollcall.io"
                }
            }

## Delete an organization [DELETE /api/v1/organizations/{orgId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

# Users [/api/v1/users]

## Show all users [GET /api/v1/users]
Get a JSON representation of all the registered users.

+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "users": [
                    {
                        "name": "Robbie",
                        "email": "robbie@ushahidi.com"
                    }
                ]
            }

## Create a user [POST /api/v1/users]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "id": 3,
                "name": "Testing Testing",
                "email": "test@ushahidi.com",
                "password": "newpassword",
                "password_confirm": "newpassword"
            }

+ Response 201 (application/json)

## Get a single user [GET /api/v1/users/{id}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            {
                "user": {
                    "id": 3,
                    "name": "Testing Testing",
                    "email": "test@ushahidi.com",
                    "username": "ushahidi",
                    "created_at": "2016-03-30 16:11:36",
                    "updated_at": "2016-03-30 16:11:36"
                }
            }

## Update a user [PUT /api/v1/users/{id}]
If a "notifications" property is present in the request, then the user's
notifications will be marked as read.

+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "name": "Testing Testing",
                "email": "test@ushahidi.com",
                "password": "newpassword",
                "password_confirm": "newpassword"
            }

+ Response 200 (application/json)
    + Body

            {
                "user": {
                    "id": 3,
                    "name": "Testing Testing",
                    "email": "test@ushahidi.com",
                    "username": "ushahidi",
                    "created_at": "2016-03-30 16:11:36",
                    "updated_at": "2016-03-30 16:11:36"
                }
            }

## Delete a user [DELETE /api/v1/users/{id}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 201 (application/json)

# People [/api/v1/organizations/{orgId}/people]

## Add member to an organization [POST /api/v1/organizations/{orgId}/people]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

## List members of an organization [GET /api/v1/organizations/{orgId}/people]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Find a member [GET /api/v1/organizations/{orgId}/people/{memberId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Delete members from an organization [DELETE /api/v1/organizations/{orgId}/people/{memberId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

## Update organization member [PUT /api/v1/organizations/{orgId}/people/{memberId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

## Accept member invite [PUT /api/v1/organizations/{orgId}/people/invite/{organisationId}/accept/{memberId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "invite_token": "aSecretToken",
                "password": "newpassword",
                "password_confirm": "newpassword"
            }

+ Response 200 (application/json)
    + Body

            {
                "user": {
                    "name": "User Name",
                    "role": "member",
                    "person_type": "user"
                }
            }

# Contacts [/api/v1/organizations/{orgId}/people/{personId}/contacts]

## Add member contact [POST /api/v1/organizations/{orgId}/people/{personId}/contacts/{orgId}/members/{personId}/contacts]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

## Update member contact [PUT /api/v1/organizations/{orgId}/people/{personId}/contacts/{orgId}/members/{personId}/contacts/{contactId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

## Delete member contact [DELETE /api/v1/organizations/{orgId}/people/{personId}/contacts/{orgId}/members/{personId}/contacts/{contactId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            []

+ Response 200 (application/json)
    + Body

            []

# Contacts [/api/v1/contacts]

## Get all contacts [GET /api/v1/contacts]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Create a contact [POST /api/v1/contacts]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "type": "email",
                "contact": "linda@ushahidi.com",
                "can_receive": "1"
            }

+ Response 200 (application/json)
    + Body

            {
                "contact": {
                    "type": "email",
                    "contact": "linda@ushahidi.com",
                    "can_receive": "1"
                }
            }

## Update a contact [PUT /api/v1/contacts/{contactId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token
    + Body

            {
                "type": "email",
                "contact": "linda@ushahidi.com",
                "can_receive": "1"
            }

+ Response 200 (application/json)
    + Body

            {
                "contact": {
                    "type": "email",
                    "contact": "linda@ushahidi.com",
                    "can_receive": "1"
                }
            }

## Delete a contact [DELETE /api/v1/contacts/{contactId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 201 (application/json)

# RollCalls [/api/v1/rollcalls]

## Get all roll calls for an organization [GET /api/v1/rollcalls]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Get a single roll call [GET /api/v1/rollcalls/{rollcallId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Create a roll call [POST /api/v1/rollcalls]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Update a roll call [PUT /api/v1/rollcalls/{rollcallId}]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## List roll call recipients [GET /api/v1/rollcalls/{rollcallId}/recipients]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## List roll call messages [GET /api/v1/rollcalls/{rollcallId}/messages]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Body

            []

## Delete a roll call [DELETE /api/v1/rollcalls]


+ Request (application/json)
    + Headers

            Authorization: Bearer token

+ Response 201 (application/json)